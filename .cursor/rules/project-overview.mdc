# N3XA Take-Home Coding Challenge: AI Support Agent

## Project Overview
This is a customer support application with AI-guided assistant functionality. The application serves two user types:

### User Types
1. **End User**: Interacts with AI assistant through chat interface to create support tickets
2. **Support Tech**: Manages and views support tickets created by end users

### Core Features Required
- **Chat Interface**: AI-guided conversation for end users
- **AI Assistant**: Guided conversation to gather ticket details (name, issue description, category)
- **Ticket Management**: Store and manage tickets with user details
- **Support Tech Interface**: Simple interface for viewing/managing tickets

### Technical Stack
- **Frontend**: Next.js 14 with TypeScript
- **UI Components**: shadcn/ui (Radix UI primitives)
- **Styling**: Tailwind CSS
- **Database**: PostgreSQL with Prisma ORM
- **AI**: LangChain integration (already configured in [llmsev/](mdc:llmsev/))

### Key Files & Directories
- [package.json](mdc:package.json) - Project dependencies and scripts
- [app/](mdc:app/) - Next.js app router pages
- [components/](mdc:components/) - Reusable UI components
- [llmsev/](mdc:llmsev/) - LangChain server configuration
- [tailwind.config.js](mdc:tailwind.config.js) - Tailwind configuration
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration

### Development Guidelines
- Focus on polished, intuitive UI/UX
- Minimize boilerplate code (no authentication required)
- Use shadcn/ui components for consistent design
- Implement proper TypeScript types
- Follow Next.js 14 app router patterns
description:
globs:
alwaysApply: false
---
