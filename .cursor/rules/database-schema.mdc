# Database Schema Guidelines

## Prisma Configuration
Create a `prisma/schema.prisma` file with the following structure:

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User Information
  userName    String
  userEmail   String?
  
  // Ticket Details
  title       String
  description String
  category    String
  
  // Status Management
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  
  // AI Assistant Data
  conversationHistory Json? // Store chat messages
  
  // Support Tech Notes
  techNotes   String?
  assignedTo  String?
  
  @@map("tickets")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
```

## Database Setup
1. Install Prisma: `yarn add prisma @prisma/client`
2. Initialize: `npx prisma init`
3. Generate client: `npx prisma generate`
4. Run migrations: `npx prisma migrate dev`

## Environment Variables
Add to `.env.local`:
```
DATABASE_URL="postgresql://username:password@localhost:5432/support_app"
```

## Database Operations
- Use Prisma Client for all database operations
- Implement proper error handling
- Use transactions for complex operations
- Implement soft deletes where appropriate
- Add indexes for frequently queried fields

## Data Validation
- Use Zod schemas for input validation
- Implement proper TypeScript types
- Validate data before database operations
- Handle edge cases and errors gracefully
description:
globs:
alwaysApply: false
---
