# AI Assistant Implementation

## LangChain Integration
The project already has LangChain configured in [llmsev/](mdc:llmsev/). Use this for AI assistant functionality.

## Chat Interface Requirements
- **Guided Conversation**: AI should ask relevant questions to gather ticket information
- **Information Gathering**: Collect user name, issue description, and category
- **Category Management**: Create de-duplicated categories automatically
- **Conversation History**: Store chat messages for context

## Implementation Structure

### Chat Message Types
```typescript
interface ChatMessage {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface ConversationState {
  messages: ChatMessage[]
  currentStep: 'greeting' | 'name' | 'issue' | 'category' | 'confirmation'
  ticketData: Partial<TicketData>
}
```

### AI Assistant Flow
1. **Greeting**: Welcome user and explain the process
2. **Name Collection**: Ask for user's name
3. **Issue Description**: Gather detailed problem description
4. **Category Selection**: Suggest or ask for appropriate category
5. **Confirmation**: Summarize and confirm ticket details
6. **Ticket Creation**: Create ticket in database

### LangChain Integration
```typescript
// Example AI assistant implementation
import { ChatOpenAI } from "@langchain/openai"
import { ConversationChain } from "langchain/chains"

const llm = new ChatOpenAI({
  temperature: 0.7,
  modelName: "gpt-3.5-turbo"
})

const chain = new ConversationChain({ llm })
```

## Conversation Management
- Store conversation state in React state or context
- Implement proper error handling for AI responses
- Add loading states during AI processing
- Provide fallback responses for AI failures
- Implement conversation reset functionality

## Category Management
- Maintain a list of existing categories
- Use AI to suggest appropriate categories
- Allow manual category creation
- Implement category deduplication logic
- Store categories in database for consistency

## Error Handling
- Handle AI service unavailability
- Implement retry logic for failed requests
- Provide user-friendly error messages
- Log errors for debugging
- Graceful degradation when AI is unavailable
description:
globs:
alwaysApply: false
---
